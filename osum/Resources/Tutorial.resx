<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AndHoldUntilTheCircleExplodes" xml:space="preserve">
    <value>...and hold until the circle explodes!</value>
  </data>
  <data name="WelcomeToTheWorldOfOsu" xml:space="preserve">
    <value>Welcome to the world of osu!.
This tutorial will teach you everything you need to know in order to become a rhythm master.</value>
  </data>
  <data name="TapToContinue" xml:space="preserve">
    <value>Tap to continue!</value>
  </data>
  <data name="Introduction2" xml:space="preserve">
    <value>osu!stream is a game which requires both rhythmical and positional accuracy.</value>
  </data>
  <data name="Introduction3" xml:space="preserve">
    <value>You will need to feel the beat, so make sure you are using headphones or playing in quiet surroundings!</value>
  </data>
  <data name="Introduction4" xml:space="preserve">
    <value>Let's start by looking at the different kinds of beats.</value>
  </data>
  <data name="HitCircle1" xml:space="preserve">
    <value>"Hit circles" are the most basic beat in osu!.</value>
  </data>
  <data name="HitCircle2" xml:space="preserve">
    <value>They are made up of the main circle...</value>
  </data>
  <data name="HitCircle3" xml:space="preserve">
    <value>And the approach circle.</value>
  </data>
  <data name="HitCircle4" xml:space="preserve">
    <value>When the approach circle reaches the border of the main circle...</value>
  </data>
  <data name="HitCircle4_1" xml:space="preserve">
    <value>...you should tap!</value>
  </data>
  <data name="HitCircle5" xml:space="preserve">
    <value>The more accurate your timing, the more points you get!</value>
  </data>
  <data name="Good" xml:space="preserve">
    <value>Good...</value>
  </data>
  <data name="Great" xml:space="preserve">
    <value>Great!</value>
  </data>
  <data name="Perfect" xml:space="preserve">
    <value>Perfect!</value>
  </data>
  <data name="HitCircle6" xml:space="preserve">
    <value>Okay. Let's give it a shot!
Try hitting these 8 hit circles.</value>
  </data>
  <data name="HitCircleJudge1" xml:space="preserve">
    <value>Hmm, looks like we need to practise a bit more. Let's go over this again!</value>
  </data>
  <data name="HitCircleJudge2" xml:space="preserve">
    <value>Getting there!
Watch the approaching circle carefully and listen to the beat. Let's try once more!</value>
  </data>
  <data name="HitCircleJudge3" xml:space="preserve">
    <value>That's right!
Focus on the beat of the song and try to time your taps to get higher accuracy.</value>
  </data>
  <data name="HitCircleJudge4" xml:space="preserve">
    <value>Flawless! Great job!</value>
  </data>
  <data name="Hold1" xml:space="preserve">
    <value>"Holds" are like hit circles, but you need to tap...</value>
  </data>
  <data name="Hold2" xml:space="preserve">
    <value>Let's try a few holds!</value>
  </data>
  <data name="Hold3" xml:space="preserve">
    <value>Now with two fingers!</value>
  </data>
  <data name="HoldJudge1" xml:space="preserve">
    <value>Make sure you hold the notes until they explode! Let's go over the basics again.</value>
  </data>
  <data name="HoldJudge2" xml:space="preserve">
    <value>Yeah, just like that. Make sure to hold them until they explode!</value>
  </data>
  <data name="Slider1" xml:space="preserve">
    <value>"Sliders" are like hit circles,</value>
  </data>
  <data name="Slider1_1" xml:space="preserve">
    <value>but extend into tracks.</value>
  </data>
  <data name="Slider2" xml:space="preserve">
    <value>Touch it like a circle...</value>
  </data>
  <data name="Slider2_1" xml:space="preserve">
    <value>then follow the ball with your finger to the end!</value>
  </data>
  <data name="Slider3" xml:space="preserve">
    <value>Some sliders need to be repeated.</value>
  </data>
  <data name="Slider3_1" xml:space="preserve">
    <value>Sometimes you will need to repeat more than once.</value>
  </data>
  <data name="Slider3_2" xml:space="preserve">
    <value>This will be indicated by an arrow at the end.</value>
  </data>
  <data name="Slider4" xml:space="preserve">
    <value>Let's try some sliders!</value>
  </data>
  <data name="SliderJudge1" xml:space="preserve">
    <value>Make sure you follow the ball with your finger! Let's go over the basics again.</value>
  </data>
  <data name="SliderJudge2" xml:space="preserve">
    <value>Make sure you follow the ball with your finger! Let's try once more.</value>
  </data>
  <data name="SliderJudge3" xml:space="preserve">
    <value>Yeah, just like that. Make sure to watch and follow the ball!</value>
  </data>
  <data name="Spinner1" xml:space="preserve">
    <value>"Spinners" are the only beats which are not rhythmical.</value>
  </data>
  <data name="Spinner2" xml:space="preserve">
    <value>When a spinner appears...</value>
  </data>
  <data name="Spinner2_1" xml:space="preserve">
    <value>..you should spin it with your finger until the bars fill!</value>
  </data>
  <data name="Spinner3" xml:space="preserve">
    <value>Spin faster for a bonus!</value>
  </data>
  <data name="Spinner3_1" xml:space="preserve">
    <value>But make sure you are ready for the beats after the spinner!</value>
  </data>
  <data name="Spinner4" xml:space="preserve">
    <value>Let's try some spinners!</value>
  </data>
  <data name="SpinnerJudge1" xml:space="preserve">
    <value>Are you actually trying? All you need to do is make circles with your finger! Let's try again...</value>
  </data>
  <data name="SpinnerJudge2" xml:space="preserve">
    <value>You're spinning, but a bit slow. Let's try once more!</value>
  </data>
  <data name="SpinnerJudge3" xml:space="preserve">
    <value>You spin like a TORNADO!</value>
  </data>
  <data name="Multitouch1" xml:space="preserve">
    <value>Some beats need to be hit at the same time.</value>
  </data>
  <data name="Multitouch1_1" xml:space="preserve">
    <value>This will be denoted by a line connecting the beats.</value>
  </data>
  <data name="Multitouch2" xml:space="preserve">
    <value>Levels are made to be playable with two {0}, but you will need to decide which fingers to use for each beat!</value>
  </data>
  <data name="Thumbs" xml:space="preserve">
    <value>thumbs</value>
  </data>
  <data name="Fingers" xml:space="preserve">
    <value>fingers</value>
  </data>
  <data name="Multitouch3" xml:space="preserve">
    <value>Let's try some connected beats!</value>
  </data>
  <data name="MultitouchJudge1" xml:space="preserve">
    <value>Make sure to touch both circles at the same time. Watch closely!</value>
  </data>
  <data name="MultitouchJudge2" xml:space="preserve">
    <value>Pretty good.</value>
  </data>
  <data name="MultitouchJudge3" xml:space="preserve">
    <value>You've mastered it.</value>
  </data>
  <data name="Stacked1" xml:space="preserve">
    <value>Beats can also appear in a stack on top of each other.</value>
  </data>
  <data name="Stacked1_1" xml:space="preserve">
    <value>Watch for multiple approach circles and tap in time with them.</value>
  </data>
  <data name="Stacked2" xml:space="preserve">
    <value>Hit circles can also be stacked at the beginning of sliders, so watch out for those!</value>
  </data>
  <data name="Stacked3" xml:space="preserve">
    <value>Let's try a few stacked beats!</value>
  </data>
  <data name="StackedJudge1" xml:space="preserve">
    <value>Hmm, not quite.. Let's go over stacks again!</value>
  </data>
  <data name="StackedJudge2" xml:space="preserve">
    <value>Watch the approach circles closely and make sure you hit every note in the stacks!</value>
  </data>
  <data name="StackedJudge3" xml:space="preserve">
    <value>Good job!</value>
  </data>
  <data name="StackedJudge4" xml:space="preserve">
    <value>Excellent!</value>
  </data>
  <data name="Stream1" xml:space="preserve">
    <value>There are three different modes of play.</value>
  </data>
  <data name="Stream2" xml:space="preserve">
    <value>Stream mode consists of three separate difficulties, otherwise known as 'Streams'.</value>
  </data>
  <data name="Stream3" xml:space="preserve">
    <value>Reaching higher streams will make gameplay harder, but allow you to get a higher score.</value>
  </data>
  <data name="Easy" xml:space="preserve">
    <value>Easy...</value>
  </data>
  <data name="Normal" xml:space="preserve">
    <value>Normal...</value>
  </data>
  <data name="Hard" xml:space="preserve">
    <value>Hard...</value>
  </data>
  <data name="Healthbar1" xml:space="preserve">
    <value>The health bar is located at the top-left of your display.</value>
  </data>
  <data name="Healthbar2" xml:space="preserve">
    <value>It will go up or down depending on your performance.</value>
  </data>
  <data name="Healthbar3" xml:space="preserve">
    <value>In stream mode gameplay, you can jump to the next stream by filling your health bar.</value>
  </data>
  <data name="Healthbar4" xml:space="preserve">
    <value>In a similar manner, if it reaches zero, you will drop down a stream.</value>
  </data>
  <data name="Healthbar5" xml:space="preserve">
    <value>If it hits zero on the lowest stream you will fail instantly, so watch out!</value>
  </data>
  <data name="Score1" xml:space="preserve">
    <value>Scoring is based on a your accuracy and combo.</value>
  </data>
  <data name="Score2" xml:space="preserve">
    <value>You can also get score bonuses from reaching higher streams, and for spinning spinners fast!</value>
  </data>
  <data name="Score3" xml:space="preserve">
    <value>Your current combo can be seen in the bottom-left corner of the screen.</value>
  </data>
  <data name="Score4" xml:space="preserve">
    <value>Your combo will only show up when you are on a streak!</value>
  </data>
  <data name="Completion" xml:space="preserve">
    <value>Congratulations. You now have the skills required to challenge osu!</value>
  </data>
  <data name="TimingEarly" xml:space="preserve">
    <value>A bit early..</value>
  </data>
  <data name="TimingLate" xml:space="preserve">
    <value>A bit late..</value>
  </data>
  <data name="TimingVeryEarly" xml:space="preserve">
    <value>Very early..</value>
  </data>
  <data name="TimingVeryLate" xml:space="preserve">
    <value>Very late..</value>
  </data>
</root>